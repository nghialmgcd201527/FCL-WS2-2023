[
{
	"uri": "/vi/",
	"title": "AWS Serverless SaaS Workshop",
	"tags": [],
	"description": "",
	"content": "AWS Serverless SaaS Workshop Tổng quan Trong bài workshop này, chúng ta sẽ xây dựng một solution Software-as-a-Service (SaaS) sử dụng các services serverless của AWS như Amazon API Gateway, Amazon Cognito, AWS Lambda, Amazon DynamoDB và Amazon CloudWatch. Mục tiêu của chúng ta là đưa đến cho các developers, architectures của SaaS đang làm việc với code có thể hiểu được cách thiết kế và chuyển sang sử dụng solution SaaS trên AWS.\nBài workshop này được viết dựa vào SaaS Factory Serverless SaaS reference solution. Ở cuối buổi workshop này, bạn sẽ xây dược được ứng dụng SaaS với đầy đủ các chức năng của reference solution ở trên. Điều đáng chú ý trong buổi workshop này là các bạn không cần thiết phải hiểu reference solution trước đó. Bạn chỉ cần làm theo hướng dẫn, từng bước một và đọc kĩ những lời giải thích thì sẽ dễ hiểu và nắm được reference solution này.\nHình dưới đây là sơ đồ cấu trúc của reference solution trên.\nNội dung Giới thiệu Các bước chuẩn bị Giới thiệu nhanh về ứng dụng web serverless Giới thiệu SaaS shared services Bắt đầu ứng dụng Tổng kết Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/1-introduce/1.1-whatsaas/",
	"title": "Delivery model SaaS có gì độc đáo?",
	"tags": [],
	"description": "",
	"content": "Software-as-a-Service (SaaS) là một delivery model của software và business cho phép các tổ chức cung cấp các giải pháp của họ theo low-friction và service-centric approach. Mô hình SaaS dựa trên sự linh hoạt và hiệu quả hoạt động như là trụ cột của các chiến lượt kinh doanh nhằm thúc đẩy tăng trưởng, phạm vi tiếp cận và đổi mới.\nMặc dù có nhiều thách thức trong công cuộc kinh doanh cần được giải quyết nhưng có một vài đặc điểm của kiến trúc, nó là cần thiết cho sự thành công của delivery model dựa trên SaaS. Dưới đây là những thách thức cơ bản mà chúng ta sẽ gặp phải khi xây dựng cấu trúc của solution dựa trên SaaS. Mục tiêu của chúng ta ở đây là giải quyết những thách thức này khi chúng ta đi vào thực hiện buổi workshop này.\nAgility Trong khi xây dựng kiến trúc cho solution của chúng ta, chúng ta nên chọn các công nghệ giúp chúng ta triển khai nhanh hơn, đáp ứng nhanh hơn với các yêu cầu từ khách hàng và thị trường. Trong buổi workshop này, chúng ta sẽ cách các service serverless giúp chúng ta triển khai nhanh hơn và loại bỏ những gánh nặng trong việc quản lí hạ tầng.\nAutomated Onboarding Một trong những thách thức lớn nhất trong việc xây dựng một solution dựa trên SaaS là việc onboarding khách hàng. Chúng ta cần phải có một quy trình onboarding tự động để giảm thiểu sự can thiệp của con người trong quá trình onboarding. Trong buổi workshop này, chúng ta sẽ sử dụng các công cụ của AWS để tự động hóa quá trình onboarding.\nIdentity managment Buổi workshop này sẽ cho chúng ta biết cách mà tenants và users của chúng ta có thể tương tác với hệ thống một cách an toàn, bảo mật. Chúng ta sẽ đạt được mục đích này khi xây dựng một hệ thống cho identity management lể lưu trữ và xác thực người dùng theo tenant-aware fashion.\n"
},
{
	"uri": "/vi/3-serverless/3.1-deploy/",
	"title": "Deploy ứng dụng",
	"tags": [],
	"description": "",
	"content": "\rỞ bước trước, bạn đã được cung cấp tài liệu để tìm hiểu cấu trúc và cách deploy ứng dụng serverless với SAM template tại đây. Trong bài này chúng ta sẽ bỏ qua chi tiết những bước đó và chỉ cần chạy file script.\nChúng ta cùng deploy ứng dụng serverless bằng cách file script deployment.sh trong thư mục /environment/aws-serverless-saas-workshop/Lab1/scripts, cùng chạy câu lẹnh dưới đây trong terminal của Cloud9.\n1| cd ~/environment/aws-serverless-saas-workshop/Lab1/scripts/\r2| ./deployment.sh -s -c --stack-name serverless-saas-workshop-lab1 Chúng ta sẽ đợi khoảng từ 5 đến 8 phút để script chạy hoàn thành. Ở trong câu lệnh ở trên, các parameters -c và -s ở đây biểu thị rằng chúng ta đang deploy cả code của server và client side. Sau khi chạy script hoàn thành, nó sẽ hiển thị URL của ứng dụng như hình.\nNếu không may các bạn lỡ tắt trang terminal vừa chạy script, thì hãy vào lại thư mục /environment/aws-serverless-saas-workshop/Lab1/scripts, tiếp theo chạy câu lệnh ./geturl.sh \u0026lt;stack_name\u0026gt;. \u0026lt;stack_name\u0026gt; ở đây là tên của stack mà bạn đã tạo ra khi chạy script ở trên.\nKiểm tra stack vừa được tạo trong CloudFormation Nhập CloudFormation ở thanh tìm kiếm service trên AWS Console sau đó chọn CloudFormation.\nỞ thanh điều hướng bên trái, chúng ta chọn Stacks. Ở đây sẽ hiển thị danh sách các stacks và chúng ta sẽ thấy stack của chúng ta có tên là serverless-saas-workshop-lab1 vừa được tạo.\nKiểm tra S3 bucket vừa được tạo Nhập S3 ở thanh tìm kiếm service trên AWS Console sau đó chọn S3.\nChúng ta sẽ thấy có hai S3 buckets vừa được tạo ra để lưu trữ resource của ứng dụng chúng ta.\nChạy thử URL của ứng dụng Coppy URL của ứng dụng và paste nó vào trình duyệt bạn đang sử dụng, bạn sẽ thấy giao diện như hình dưới đây.\nVậy là chúng ta đã thành công việc deploy ứng dụng serverless của chúng ta. Trong bước tiếp theo,chúng ta sẽ thêm data vào ứng dụng và khám phá cấu trúc hoạt động của nó.\n"
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trước khi chúng ta đi sâu vào những dòng code, điều đầu tiên chúng ta cần làm là hãy hiểu về cấu trúc được tạo ra trong lúc xây dựng một solution SaaS-based. Trong phần này sẽ đưa chúng ta đến với những ý tưởng để sau này thực hiện những thiết kế mà chúng ta tự làm và có thể hiểu được rõ hơn những gì chúng ta xây dựng trong buổi workshop này. Chúng ta sẽ cùng tìm hiểu tại sao serverless lại phù hợp để sử dụng trong mô hình này và những service serverless nào được sử dụng trong suốt buổi workshop.\nNội dung Delivery model SaaS có gì độc đáo? Tại sao sử dụng Serverless? Chúng ta sẽ xây dựng những cái gì? Những service Serverless được sử dụng Kiến thức cần nắm rõ "
},
{
	"uri": "/vi/4-saas/4.1-ini/",
	"title": "Khởi tạo dự án",
	"tags": [],
	"description": "",
	"content": "Ở bước trước, chúng ta đã tìm hiểu cấu trúc và cách deploy ứng dụng serverless với SAM template ở đây\nỞ bước này, chúng ta sẽ khởi tạo dự án trước khi đi tìm hiểu chi tiết về cấu trúc của nó. Chúng ta hãy chạy lệnh dưới đây để khởi tạo dự án. Hãy chuyền giá trị địa chỉ email, nó sẽ được sử dụng để nhận thông tin dùng để đăng nhập vào ứng dụng của admin.\ncd ~/environment/aws-serverless-saas-workshop/Lab2/scripts/\r./deployment.sh -s -c --email \u0026lt;email address\u0026gt; Hãy đi đến bước tiếp theo trong lúc đoạn script đang được thực thi. Nhấn nút Next.\nFile script sẽ gửi thông tin đăng nhập cho admin vào địa chỉ email mà bạn đã cung cấp ở trên.\nKhi file script thực thi thành công, chúng ta sẽ nhận được hai đường dẫn Admin site URL và Landing site URL như hình bên dưới.\nChúng ta coppy và paste URL của Admin site. Nhập vào username và password được gửi đến email của chúng ta để đăng nhập.\nỞ bước hệ thống yêu cầu chúng ta reset lại password, để password chúng ta được validate, các bạn hãy bao gồm chữ in hoa và một kí tự đặc biệt.\nGiao diện ứng dụng dành cho admin sẽ như hình dưới đây.\nVà giao diện của landing site sẽ như hình dưới đây.\n"
},
{
	"uri": "/vi/5-onboarding/5.1-onboardingadmin/",
	"title": "Sử dụng ứng dụng SaaS admin",
	"tags": [],
	"description": "",
	"content": "Bây giờ các shared services của chúng ta đã được deploy, chúng ta có thể giới thiệu đến các tenants về ứng dụng của chúng ta. Solution này thực sự hỗ trợ hai luồng riêng biệt dành cho onboarding tenants. Cái đầu tiên chúng ta sẽ xem xét ở đây được trigger từ ứng dụng SaaS admin. Mô hình này thường được sử dụng trong các môi trường mà hệ thống không hỗ trợ self-service onboarding model.\nSử dụng ứng dụng SaaS admin Đầu tiên, copy URL của ứng dụng SaaS Admin được gửi kèm trong email được gửi đến.\nPaste URL đó và chạy trên trình duyệt của bạn. Bạn sẽ thấy trang login như hình dưới đây.\nTrong quá trình deploy ứng dụng của chúng ta ở bước trước, bạn được cung cấp username và password trong email được gửi đến bạn. Bạn phải thiết lập lại password nếu bạn đăng nhập lần đầu tiên, username sẽ là admin-user.\nKhi bạn đã đăng nhập thành công, nó sẽ hiển thị ra giao diện của ứng dụng trong trang Dashboard.\nỞ thanh điều hướng bên trái, chọn mục Tenants nó sẽ hiển thị danh sách tenant đã onboarded nhiw hình dưới đây. Danh sách sẽ trống vì hiện tại chúng ta chưa có tenant nào onboard. Bây giờ, click vào nút Add Tenant.\nBạn sẽ thấy form cần điền thông tin như bên dưới. Đặt tên cho tenant là test tenant 1, đảm bảo cung cấp địa chỉ email mà bạn có thể truy cập. Bạn có thể cung cấp cùng địa chỉ email mà bạn đã sử dụng cho admin bằng cách thêm +tenant1 vào hậu tố. Như email đã đăng kí cho admin trước đó là lmnghia911@gmail.com thì bây giờ sẽ điền email vào là lmnghia911+tenant1@gmail.com. Email này sẽ được sử dụng để cung cấp tenant admin user ở trong Amazon Cognito User Pool. Ngoài ra một nhóm Cognito User được tạo ra cho tenant mới này. Cognito sẽ gửi mail thông tin xác thực tạm thời cho người dùng tenant admin users. Nhấn nút Submit để bắt đầu quá trình.\nSau khi tạo tenant thành công, nó sẽ được hiển thị trong danh sách như hình dưới đây.\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createcloud9workspace/",
	"title": "Tạo Cloud9 Workspace",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Cloud9 Nhập Cloud9 ở thanh tìm kiếm service trên AWS Console sau đó chọn Cloud9. Chọn Create environment Đặt tên cho Cloud9 Workspace là saas-workshop. Ở mục Description hãy nhập mục đích bạn muốn sử dụng trong workspace này. Nhập Saas workshop with serverless Environment type, ở đây chúng ta sẽ tạo một server để chạy Cloud9 workspace này. Mình sẽ chọn option New EC2 instance để tạo một server mới. Sang phần setting cho New EC2 instance, chọn Additional instance types sau đó chúng ta chọn loại t3.large. Giữ nguyên mặc định cho những thiết lập khác. Click nút Create. Đợi khoảng 10 phút để Cloud9 Workspace được tạo. Khi Cloud9 Workspace được tạo xong, chúng ta sẽ có một môi trường để làm việc với AWS CLI và các công cụ khác. Trong danh sách các Environments được tạo ra, hãy tìm environment serverless-workshop và click vào nút Open để mở môi trường Cloud9. Sau khi môi trường mở ra, chúng ta hãy tắt những phần bên dưới đã được khởi tạo lúc bắt đầu và tạo một trang terminal mới. Hãy chắc chắn rằng bạn đã tắt tất cả các tab đã tổn tại khi chúng ta mở Cloud9 IDE trước khi chúng ta thực hiện một hoạt đồng nào đó, hãy click vào X button để tắt tab đó. Cái này rất cần thiết để đảm bảo rằng bước tiếp theo khi cài đặt những công cụ cần thiết cho workshop này sẽ không bị ảnh hưởng.\nWorkspace của chúng ta sẽ trông như thế này.\n"
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "API Gateway - REST API Ở bước này, bạn có thể sử dụng Amazon API Gateway console để create và test một simple REST API với tích hợp HTTP cho website của bạn.\nVí dụ với website PeetStore, API sẽ hỗ trợ các phương thức cho client truy cập vào phía backend của website http://petstore-demo-endpoint.execute-api.com/petstore/pets.\nGET / : cho phép truy cập và đọc dữ liệu từ resource gốc của API. API Gateway sẽ phản hồi với một dữ liệu có sẵn trong cửa hàng. GET /pests : cho phép truy cập và đọc dữ liệu từ resource của API /pets được tích hợp với tên phụ trợ /pets. Backend trả về cho page những pets có sẵn trong store. Đây là ví dụ khi tích hợp với HTTP, URL có tên như này http://petstore-demo-endpoint.execute-api.com/petstore/pets. POST /pets : cho phép truy cập và thêm dữ liệu vào resource của API /pets được tích hợp với tên phụ trợ /petstore/pets. Khi nhận được yêu cầu chính xác, backend sẽ thêm pets chính xác vào PetStore và trả kết quả về với caller. Nó cũng được tích hợp vs HTTP. API hỗ trợ truy cập CORS thông qua các phương thức tùy chọn của loại tích hợp có tên là MOCK. API Gateways trả về các headers hỗ trợ truy cập CORS. Chúng tôi sẽ hướng dẫn bạn các bước để tạo và kiểm tra API từ ví dụ ở trên sử dụng API Gateway Console.\nCloud9 Workspace Bạn có thể deploy ứng dụng của bạn từ môi trường làm việc local nếu bạn muốn nhưng tôi khuyến khích bạn sử dụng AWS Cloud9 integrated development environment (IDE).\nHãy nhớ rằng Cloud9 workspace chỉ nên được tạo ra bởi IAM user (hoặc là được gán vào một IAM role thích hợp) với đặc quyền của Admin, không được dùng root user.\nChúng ta thường dùng môi trường phát triển tích hợp (Integrated Development Environment - IDE) ở local, trong bài workshop này, chúng ta sẽ dùng Cloud9. Nó là một IDE chạy trên cloud sử dụng trình duyệt, bao gồm những tính năng quan trọng, thiết yếu ở local IDE mà chúng ta thường dùng như viết, chạy, debug code. Cloud9 đã được trang bị sẵn những gói tệp tin như JavaScript, Python, NodeJS và những thứ khác ở đây\nĐể các dịch vụ của AWS phản hồi nhanh hơn, hãy chọn Region gần nhất trong suốt buổi workshop.\nNội dung Tạo Cloud9 Workspace Tăng dung lượng của Cloud9 instance Cài đặt các công cụ cần thiết Thiết lập role ARN của CloudWatch log cho API Gateway "
},
{
	"uri": "/vi/4-saas/4.2-misscode/",
	"title": "Hoàn thiện code",
	"tags": [],
	"description": "",
	"content": "Review code ở IDE của chúng ta Trước khi bắt đầu modify ứng dụng, thêm hoặc thay đổi code, chúng ta hãy xem cấu trúc code trong Cloud9 IDE\nTrong IDE của bạn, hãy mở folder Lab2, chúng ta sẽ thấy foler server. Có thư mục mới là TenantManagementService. Thư mục này chứa code của shared services của chúng ta nó đại diện cho nhiều microservices khác nhau được sử dụng để hỗ trợ các horizontal requirements của solution serverless SaaS. Nó bảo gồm registration service, tenant management service, và user management service. Với mỗi file trong danh sách này được viết bằng Python cùng với Lambda functions là một phần của microservices. Trong folder Lab2/server, chúng ta cũng thấy folder Resource chứa file shared_service_authorizer.py. File này sẽ gồm code của lambda authorizer, được sử dụng để API Gateway xác thực SaaS admin application. Cuối cùng, nhìn vào folder con nested_templates và xem cách chúng ta chia nhỏ ứng dụng của chúng ta từ file template thành những file nhỏ hơn để dễ quản lí và maintain. Và bây giờ file template.yaml sử dụng những file này để deploy infrastructure. Nó cho phép chúng ta chia nhỏ code của cơ sở hạ tầng thành những phần nhỏ hơn để dễ quản lí hơn. Bây giờ chúng ta sẽ đi hoàn thiện code cho ứng dụng của chúng ta.\nTenant Management Service Chúng ta hãy vào thư mục Lab2/server/TenantManagementService và mở file tenant-management.py ở trong IDE của bạn và tìm tới method get_tenant. Lambda function này được sử dụng bởi method GET của API Gateway /tenant để lấy tất cả chi tiết của tenant. Method này chưa được thực thi, chúng ta thực thi method này để truy xuất dữ liệu từ table DynamoDB và trả kết quả về UI. Bạn có thể sử dụng code bên dưới và thêm vào function get_tenant mà chúng ta đã tìm được để hoàn thành.\ndef get_tenant(event, context):\rtenant_id = event[\u0026#39;pathParameters\u0026#39;][\u0026#39;tenantid\u0026#39;]\rlogger.info(\u0026#34;Request received to get tenant details\u0026#34;)\rtenant_details = table_tenant_details.get_item(\rKey={\r\u0026#39;tenantId\u0026#39;: tenant_id,\r},\rAttributesToGet=[\r\u0026#39;tenantName\u0026#39;,\r\u0026#39;tenantAddress\u0026#39;,\r\u0026#39;tenantEmail\u0026#39;,\r\u0026#39;tenantPhone\u0026#39;\r]\r)\ritem = tenant_details[\u0026#39;Item\u0026#39;]\rtenant_info = TenantInfo(item[\u0026#39;tenantName\u0026#39;], item[\u0026#39;tenantAddress\u0026#39;],item[\u0026#39;tenantEmail\u0026#39;], item[\u0026#39;tenantPhone\u0026#39;])\rlogger.info(tenant_info)\rlogger.info(\u0026#34;Request completed to get tenant details\u0026#34;)\rreturn utils.create_success_response(tenant_info.__dict__) Bạn sẽ thấy chúng ta đã sử dụng tenant_id để truy xuất dữ liệu từ table tenant_details và trả về kết quả. Bạn có thể thấy chúng ta đã sử dụng AttributesToGet để chỉ định các thuộc tính mà chúng ta muốn lấy từ table. Bạn có thể thêm vào các thuộc tính khác nếu cần thiết.\nUser Management Service Tương tự ở trên, chúng ta sẽ làm tương tự với method create_user trong file user-management.py ở thư mục Lab2/server/TenantManagementService.\ndef create_user(event, context):\ruser_details = json.loads(event[\u0026#39;body\u0026#39;])\rlogger.info(\u0026#34;Request received to create new user\u0026#34;)\rlogger.info(event)\rtenant_id = user_details[\u0026#39;tenantId\u0026#39;]\rresponse = client.admin_create_user(\rUsername=user_details[\u0026#39;userName\u0026#39;],\rUserPoolId=user_pool_id,\rForceAliasCreation=True,\rUserAttributes=[\r{\r\u0026#39;Name\u0026#39;: \u0026#39;email\u0026#39;,\r\u0026#39;Value\u0026#39;: user_details[\u0026#39;userEmail\u0026#39;]\r},\r{\r\u0026#39;Name\u0026#39;: \u0026#39;custom:userRole\u0026#39;,\r\u0026#39;Value\u0026#39;: user_details[\u0026#39;userRole\u0026#39;]\r},\r{\r\u0026#39;Name\u0026#39;: \u0026#39;custom:tenantId\u0026#39;,\r\u0026#39;Value\u0026#39;: tenant_id\r}\r]\r)\rlogger.info(response)\ruser_mgmt = UserManagement()\ruser_mgmt.add_user_to_group(user_pool_id, user_details[\u0026#39;userName\u0026#39;], tenant_id)\rresponse_mapping = user_mgmt.create_user_tenant_mapping(user_details[\u0026#39;userName\u0026#39;], tenant_id)\rlogger.info(\u0026#34;Request completed to create new user \u0026#34;)\rreturn utils.create_success_response(\u0026#34;New user created\u0026#34;) Bạn sẽ thấy chúng ta đã sử dụng user_details để lấy thông tin của user từ request body và sử dụng tenant_id để thêm user vào group của tenant. Bạn có thể thêm vào các thuộc tính khác nếu cần thiết. Lưu ý cách mà tenantId và userRole được lưu dưới dạng custom attributes.\nRegistration Service Trong service Registration là service điều phối onboarding flow. Registration service được gọi thông qua API Gateway dưới dạng public endpoint. Cái này là do thiết kế vì new tenants không thể được xác thực. Tuy nhiên, các endpoints được sử dụng để tạo ra tenant admin và tenant được bảo vệ bởi API Gateway resource policies capabilitty. Những endpoints này chỉ có thể được gọi từ service Tenant Registration.\nHiện tại, method register_tenant trong file tenant_registration.py ở thư mục Lab2/server/TenantManagementService đang còn trống. Hãy tìm đến method này và thêm đoạn code dưới đây vào.\ndef register_tenant(event, context):\rtry:\rtenant_id = uuid.uuid1().hex\rtenant_details = json.loads(event[\u0026#39;body\u0026#39;])\rtenant_details[\u0026#39;tenantId\u0026#39;] = tenant_id\rlogger.info(tenant_details)\rstage_name = event[\u0026#39;requestContext\u0026#39;][\u0026#39;stage\u0026#39;]\rhost = event[\u0026#39;headers\u0026#39;][\u0026#39;Host\u0026#39;]\rauth = utils.get_auth(host, region)\rheaders = utils.get_headers(event)\rcreate_user_response = __create_tenant_admin_user(tenant_details, headers, auth, host, stage_name)\rlogger.info (create_user_response)\rtenant_details[\u0026#39;tenantAdminUserName\u0026#39;] = create_user_response[\u0026#39;message\u0026#39;][\u0026#39;tenantAdminUserName\u0026#39;]\rcreate_tenant_response = __create_tenant(tenant_details, headers, auth, host, stage_name)\rlogger.info (create_tenant_response)\rexcept Exception as e:\rlogger.error(\u0026#39;Error registering a new tenant\u0026#39;)\rraise Exception(\u0026#39;Error registering a new tenant\u0026#39;, e)\relse:\rreturn utils.create_success_response(\u0026#34;You have been registered in our system\u0026#34;) Bạn sẽ thấy đoạn code này tạo ra một tenant_id và thêm vào tenant_details. Sau đó, nó sẽ gọi method __create_tenant_admin_user và __create_tenant để tạo ra tenant admin và tenant. Bạn có thể thêm vào các thuộc tính khác nếu cần thiết.\nNhớ lưu lại các file đã chỉnh sửa bằng phím tắt Ctrl+S hoặc Cmd+S.\n"
},
{
	"uri": "/vi/5-onboarding/5.2-landing/",
	"title": "Sử dụng ứng dụng Sign-up dành cho tenant",
	"tags": [],
	"description": "",
	"content": "Các tenants cũng có thể onboard trong chế độ self-service. Đối với việc này, chúng ta cần một ứng dụng riêng đại diện cho công cụ hướng tới công chúng có thể được sử dụng để khách hàng tham với tư cách là một tenant.\nNếu không may các bạn lỡ tắt trang terminal vừa chạy script, thì hãy vào lại thư mục /environment/aws-serverless-saas-workshop/Lab2/scripts, tiếp theo chạy câu lệnh ./geturl.sh thì nó sẽ hiển thị lại URL mà các bạn cần\nỞ bước deploy lại ứng dụng sau khi thay đổi, chúng ta đã có URL của landing site. Chúng ta copy nó và paste vào trình duyệt để chạy nó. Bạn sẽ thấy giao diện như hình bên dưới. Đây là self-service page nơi mà bạn không cần bất kì thông tin xác thực nào để tiếp nhận một tenant.\nHãy click vào nút Sign up now! Sau đó bạn sẽ thấy một form như hình bên dưới. Đặt tên cho tenant là tenant2, chọn Plan là Standard và điền các thông tin còn lại trong form. Đảm bảo rằng cung cấp địa chỉ email mà bạn có thể truy cập. Bạn có thể cung cấp cùng địa chỉ email mà bạn đã sử dụng cho admin bằng cách thêm +tenant2 vào hậu tố. Như email đã đăng kí cho admin trước đó là lmnghia911@gmail.com thì bây giờ sẽ điền email vào là lmnghia911+tenant2@gmail.com. Email này sẽ được sử dụng để cung cấp tenant admin user ở trong Amazon Cognito User Pool. Ngoài ra một nhóm Cognito User được tạo ra cho tenant mới này. Cognito sẽ gửi mail thông tin xác thực tạm thời cho người dùng tenant admin users. Nhấn nút Submit để bắt đầu quá trình.\nKhi tenant được onboard thành công, bạn sẽ thấy có thông báo thành công hiện ra như hình bên dưới.\nQuay lại ứng dụng SaaS admin, refresh lại page và click vào mục Tenants ở thanh điều hướng bên trái. Bạn sẽ thấy tenant mới xuất hiện ở đây.\n"
},
{
	"uri": "/vi/1-introduce/1.2-whyserverless/",
	"title": "Tại sao sử dụng Serverless?",
	"tags": [],
	"description": "",
	"content": "AWS Serverless Servoces cho phép bạn tập trung vào SaaS solution mà không cần phải quản lí servers. Nó giải quyết những vấn đề, thách thức trong việc xây dựng delivery model dựa trên SaaS.\nNhà cung cấp SaaS có thể tiếp cận thị trường nhanh hơn vì Serverless giúp chúng ta loại bỏ đi việc vận hành. Bạn chỉ trả phí cho những gì bạn sử dụng và nó giúp cho các nhà cung cấp SaaS bỏ qua giai đoạn đầu tư ban đầu của tenants/customers. Serverless cho phép bạn mở rộng quy mô theo dung lượng của người dùng. Điều này cực kì quan trọng, vì ban đầu bạn sẽ không thể xác định được dung lượng mà tenants sẽ cần trên hệ thống của bạn. Cuối cùng, các nhà cung cấp SaaS có thể tập trung vào IP của họ thay vì phải suy nghĩ về việc mở rộng quy mô và quản lí cơ sở hạ tầng. "
},
{
	"uri": "/vi/2-prerequiste/2.2-repodisk/",
	"title": "Tăng dung lượng của Cloud9 instance",
	"tags": [],
	"description": "",
	"content": "\rĐầu tiên, chúng ta sẽ cập nhật phiên bản mới nhất của AWS CLI:\npip install --user --upgrade awscli aws-sam-cli Ở trang terminal trên Cloud9, chạy command sau để để clone Git repository aws-serverless-saas-workshop:\ngit clone https://github.com/aws-samples/aws-serverless-saas-workshop.git Sau khi chạy câu lệnh trên, chúng ta sẽ được như hình. Chúng ta sẽ thấy thư mục aws-serverless-saas-workshop được tạo ra.\nKiểm tra dung lượng của Cloud9 instance Mặc định, dung lượng trống của một Cloud9 instance chỉ tầm khoảng 2GB. Dùng đoạn script dưới đây để tránh tình trạng hết dung lượng và vấn đề trong suốt buổi workshop.\nChuyển đến thư mục aws-serverless-saas-workshop, kiểm tra dung lượng của volume hiện tại bằng lệnh sau:\ncd aws-serverless-saas-workshop\rdf -h Chúng ta sẽ nhận được kết quả như hình bên dưới:\nfilesystem ở đường dẫn /dev/nvme0n1p1 là volume mà chúng ta đang sử dụng. Chúng ta sẽ thấy dung lượng trống của Cloud9 instance này là 3.6G. Để tránh tình trạng hết dung lượng trong suốt buổi workshop, chúng ta được yêu cầu tối thiểu 50G cho workshop này, bắt đầu tăng dung lượng của Cloud9 instance này lên 50G.\nCác bạn hãy vào thư mục Cloud9Setup và mở file script increase-disk-size.sh bằng đường dẫn sau:\ncd ~/environment/aws-serverless-saas-workshop/Cloud9Setup/ Sau khi mở file script increase-disk-size.sh, chúng ta sẽ thấy nội dung đoạn script dùng để tăng dung lượng:\nChúng ta tăng dung lượng Cloud9 instance bằng cách chạy file script đó:\n./increase-disk-size.sh Sau khi tăng thành công, chúng ta sẽ nhận được output như hình:\nBây giờ hãy kiểm tra lại dung lượng hiện tại bằng lệnh sau:\ndf -h Và chúng ta sẽ thấy kết quả.\nNhư chúng ta thấy ở đường dẫn /dev/nvme0n1p1, dung lượng hiện tại của Cloud9 instance đã tăng lên 50G.\nThỉnh thoảng, mặc dù dung lượng của Cloud9 instance đã được tăng lên 50G, nó vẫn có thể hiển thị là 10G khi bạn chạy câu lệnh df -h. Trong trường hợp này, hãy restart Cloud9 instance bằng câu lệnh sudo reboot và chạy lại câu lệnh df -h để kiểm tra lại.\n"
},
{
	"uri": "/vi/3-serverless/3.2-adddata/",
	"title": "Thêm data và tìm hiểu quy trình xử lí của architecture",
	"tags": [],
	"description": "",
	"content": "Đầu tiên chúng ta sẽ đi đến API Gateway Console, nhập API Gateway ở thanh tìm kiếm service trên AWS Console sau đó chọn API Gateway.\nNó sẽ đưa chúng ta đến trang danh sách các APIs đã được tạo. Chúng ta sẽ thấy có một API có tên là serverless-saas-workshop-lab1 được tạo ra từ file script deployment.sh ở bước trước.\nCoppy ID của API này. Click vào tên của API đó để xem chi tiết cách chúng ta đã tích hợp API Gateway với Lambda functions. Bạn có thể nhìn thấy bằng cách click vào các methods khác nhau như POST, GET, PUT và sẽ thấy mỗi methods được liên kết với Lamba function của nó. Cách này cho phép bạn mở rộng quy mô từng Lambda một cách độc lập mà không ảnh hưởng đến các Lambda functions khác.\nNhư hình dưới đây, chúng ta click vào method POST nó sẽ ra quy trình hoạt động của method này.\nTiếp theo chúng ta sẽ add product vào hệ thống sử dụng API do API Gateway cung cấp. Quay trở lại Cloud9 terminal, coppy câu lệnh dưới đây, lệnh này sẽ đưa ra lệnh gọi POST REST tới API và thêm một product mới vào hệ thống. Chúng ta sẽ thay và bằng giá trị ID của API lúc nãy vừa coppy và region chúng ta đang hoạt động.\ncurl -X POST https://\u0026lt;api-id\u0026gt;.execute-api.\u0026lt;region\u0026gt;.amazonaws.com/prod/product -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;category\u0026#34;: \u0026#34;category1\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Lamborghini\u0026#34;, \u0026#34;price\u0026#34;: \u0026#34;1000\u0026#34;, \u0026#34;sku\u0026#34;: \u0026#34;dollar\u0026#34;}\u0026#39; Chúng ta sẽ thấy như hình:\nBây giờ, cùng kiểm tra lại bảng Amazon DynamoDB và xem dữ liệu đã được thêm vào sau khi lệnh ở trên đã được thực thi thành công.\nNhập DynamoDB ở thanh tìm kiếm service trên AWS Console sau đó chọn DynamoDB.\nỞ thanh điều hướng bên trái, chúng ta chọn Tables. Ở đây sẽ hiển thị danh sách các tables và chúng ta sẽ thấy tất cả tables được tạo ra là Order-Lab1 và Product-Lab1.\nClick vào table Product-Lab1, sau đó click vào Explore table items ở phía bên phải. Để xem các dữ liệu trong bảng.\nVà chúng ta sẽ thấy dữ liệu mà chúng ta vừa thêm vào sau khi chạy câu lệnh trên ở phần Items returned.\nCuối cùng, chúng ta sẽ kiểm tra ở CloudWatch để xem các logs được tạo ra khi gọi API. Nhập CloudWatch ở thanh tìm kiếm service trên AWS Console sau đó chọn DynamoDB.\nỞ thanh điều hướng bên trái, chúng ta chọn Log groups trong phần Logs. Và chọn log group có tên bao gồm cụm từ CreateProductFunction.\nSau đó chúng ta xuống dưới phần Log streams, click vào log stream vừa được tạo ra khi gọi API.\nCuối cùng, chúng ta sẽ chọn Timestamp mà ở đó nó sẽ gồm dữ liệu chúng ta thêm vào khi gọi API.\nKhi các bạn thấy như hình, vậy là chúng ta đã thành công khi thêm data vào hệ thống và nhận các logs về hoạt động này.\n"
},
{
	"uri": "/vi/2-prerequiste/2.3-installtool/",
	"title": "Cài đặt các công cụ cần thiết",
	"tags": [],
	"description": "",
	"content": "\rĐầu tiên, chúng ta sẽ cập nhật phiên bản mới nhất của AWS CLI:\npip install --user --upgrade awscli aws-sam-cli Các bạn hãy vào thư mục Cloud9Setup và mở file script pre-requisites.sh bằng đường dẫn sau:\ncd ~/environment/aws-serverless-saas-workshop/Cloud9Setup/ Sau khi mở file script pre-requisites.sh, chúng ta sẽ thấy nội dung đoạn script dùng để cài đặt toàn bộ các công cụ cần thiết của buổi workshop này:\nChúng ta chạy file script đó để cài đặt, sẽ mất khoảng từ 3 đến 5 phút để hoàn thành:\n./pre-requisites.sh Đoạn script trên sẽ tải và upgrade các công cụ cho Cloud9 IDE của bạn:\nPython 3.8 AWS CLI AWS SAM AWS CDK CLI git-remote-codecommit Node and npm Sau khi chạy script hoàn thành, chúng ta sẽ thấy kết quả như hình bên dưới:\nTiếp theo, vẫn trong đường dẫn đó, chúng ta mở file pre-requisites-versions-check.sh :\nĐoạn script trên sẽ kiểm tra phiên bản của các công cụ đã được cài đặt ở trên có phù hợp với buổi workshop này hay không. Chúng ta chạy file script đó để kiểm tra:\n./pre-requisites-versions-check.sh Hãy chắn rằng kết quả của bạn sẽ nhận được PASS cho tất cả các công cụ được cài đặt và cập nhật:\nThỉnh thoảng, mặc dù đã cài đặt và cập nhật đúng phiên bản nhưng khi chạy script kiểm tra phiên bản nhưng mà nó vẫn chưa cập nhật thì các bạn hãy restart lại Cloud9 instance bằng câu lệnh sudo reboot và chạy lại script kiểm tra phiên bản đó.\n"
},
{
	"uri": "/vi/1-introduce/1.3-whatbuild/",
	"title": "Chúng ta sẽ xây dựng những cái gì?",
	"tags": [],
	"description": "",
	"content": "Trong buổi workshop này, chúng ta sẽ build cấu trúc chồng lên nhau bằng cách thêm dần các thành phần để đạt mục tiêu cuối cùng là xây dựng một ứng dụng SaaS với đầy đủ chức năng.\nDưới đây là kiến trúc mà chúng ta sẽ xây dựng trong buổi workshop này.\nChúng ta sẽ chia kiến trúc này thành 3 phần.\nWeb applications Đây là 3 ứng dụng khác nhau mà chúng ta dùng nó để tương tác với các backend services. Mỗi ứng dụng đó đều được xây dựng bằng Angular.\nỨng dụng SaaS provider admin console dành cho administrators của các nhà cung cấp SaaS Ứng dụng Landing/sign-up application dùng cho những tenants mới đăng ký thành viên. Ứng dụng Sample SaaS commerce application đại diện cho một ứng dụng thương mại điện tử điển hình. Người dùng cần phải đăng nhập vào để sử dụng các tính năng của nó. Shared services Bạn sẽ thấy một tập hợp các dịch vụ được chia sẻ, nó chịu trách nhiệm về việc quản lí người dùng, tenants ở các khía cạnh của ứng dụng. Cái tên shared chuyền tải khái niệm rằng các dịch vụ này là nền tảng cho môi trường SaaS, cung cấp các tính năng cross-cutting tách biệt với các application service của bạn và được chia sẻ với tất cả các tenants. Điều này có nghĩa là tất cả hoạt động và dữ liệu được dùng để tích hợp, quản lí, xác thực và cấu hình cho tenants đều được xử lí bởi share services.\nĐể tìm hiểu nhiều hơn về Share Services, hãy xem tài liệu này, ở đây sẽ có phần Q\u0026amp;A để giải thích những khuất mắt của nó\nApplication services (Tiered Deployment Model) Các application services là đại diện của các microservices, nó cung cấp các chức năng chính cho ứng dụng của bạn. Trong solution này, bạn sẽ thấy rằng chúng ta hỗ trợ mô hình triển khai theo tầng cho các microservices này. Các SaaS provider thường được yêu cầu hỗ trợ nhiều ties mà nó có những yêu cầu khác nhau về isolation, noisy neighbor, performance và những thứ khác. Ý tưởng ở đây là chúng ta sẽ xem xét cân nhắc sử dụng các tiers để hỗ trợ các yêu cầu này. Chúng ta sẽ sử dụng tenant tier để đóng góp vào cách triển khai các microservices cho một tenant nhất định.\nBạn sẽ thấy 3 tiers Basic, Standard, Premium mà tenants sẽ sử dụng mô hình pooled trong đó các tenants chia sẻ AWS resources. Mặt khác, Platinum tier tenants được triển khai với Silo model. Điều này nghĩa là mỗi Platinum tier tenant được hưởng AWS resources của iêng họ, không được chia sẻ với bất kì tenant nào khác.\nĐể tìm hiểu nhiều hơn về Application Services, hãy xem tài liệu này, ở đây sẽ có phần Q\u0026amp;A để giải thích những khuất mắt của nó\n"
},
{
	"uri": "/vi/4-saas/4.3-deploy/",
	"title": "Deploy cập nhật những thay đổi",
	"tags": [],
	"description": "",
	"content": "\rHãy chắc chắn bạn đã lưu lại tất cả sự thay đổi từ bước trước đó.\nĐến lúc này, việc khởi tạo dự án đã hoàn thành, nếu nó chưa chạy xong thì hãy đợi nó hoàn thành trước khi tiếp tục. Nếu quan tâm, hãy thoải mái khám phá các đoạn code bên trong foler TenantManagementService, nơi bạn chưa xem ở bước trước đó.\nChạy câu lệnh dưới đây để deploy đoạn code mới mà bạn vừa thêm vào ở trong các file trước đó. Hãy lưu ý, trong file script deploy-updates.sh bạn sẽ thấy bạn đang sử dụng câu lệnh sam sync để đồng bộ code đã cập nhật thay vì deploy lại tất cả stack lại.\nChạy câu lệnh dưới đây.\ncd ~/environment/aws-serverless-saas-workshop/Lab2/scripts\r./deploy-updates.sh Sau khi deploy lại thành công, chúng ta sẽ nhận lại được URL của Admin site và Landing site như hình dưới đây.\n"
},
{
	"uri": "/vi/3-serverless/",
	"title": "Giới thiệu nhanh về ứng dụng web serverless",
	"tags": [],
	"description": "",
	"content": "Tổng quan Mục tiêu của phần này là giới thiệu cho các bạn ứng dụng web cơ bản về serverless và hiểu được cách mà các services AWS Serverless tương tác với nhau. Chúng ta sẽ bắt đầu bước này bằng cách giúp bạn làm quen với các phần chuyển động của environtment của ứng dụng web Serverless nói chung. Trong các phần tiếp theo, bạn sẽ sử dụng ứng dụng web này để thêm các tính năng cần thiết để xây dựng ứng dụng SaaS của chúng ta.\nTrong phần này, chúng ta sẽ sử dụng Serverless Application Model (SAM) để xây dựng một quy trình backend để xử lí các yêu cầu từ ứng dụng web. Bạn sẽ dùng Lambda function để thực hiện mỗi chức năng mà ứng dụng cần, mỗi lần user gửi request đến, nó sẽ được gọi thực thi. Funtion này sẽ lưu trữ dữ liệu vào DynamoDB, sau đó sẽ gửi phản hồi đến phần front-end và cập nhật trên giao diện người dùng. Function được gọi từ trình duyệt bằng Amazon API Gateway.\nSAM là gì? Serverless Application Model (SAM) là một open-source framework nó sẽ giúp việc triển khai serverless application trở nên dễ dàng hơn. Nó cung cấp một cách đơn giản để định nghĩa các serverless application, và cung cấp một tập các công cụ để triển khai các ứng dụng đó.\nNó cho phép chúng ta xác định rõ những yêu cầu của ứng dụng bằng code. SAM chuyển đổi và mở rộng SAM syntax lên AWS Cloudformation để triển khai ứng dụng của bạn. Bạn sẽ thấy và sử dụng SAM templates throughout this workshop.\nSAM hoạt động như thế nào? AWS SAM dựa trên AWS Cloudformation. Một ứng dụng serverless được định nghĩa bằng một CloudFormation template và được triển khai với CloudFormation stack. Tóm lại, AWS SAM template là CloudFormation template.\nAWS SAM xác định một tập hợp tài nguyên mô tả các components chung của ứng dụng serverless. Để AWS SAM có những objects được định nghĩa trong CloudFormation template thì template đó phải gồm phần Transform trong document root là AWS::Serverless-2016-10-31.\nTrong bài này chúng ta sẽ không đi sâu vào phân tích triển khai một ứng dụng web Serverless với SAM template, nên nếu bạn chưa có kiến thức gì về SAM template thì hãy tham khảo ở đây để nắm rõ cấu trúc và nội dụng của các file mà mình sẽ chỉ việc chạy script để không mất nhiều thời gian trong bài workshop này.\nBên dưới là kiến trúc hạ tầng của ứng dụng web này.\nKhi nhìn vào kiến trúc hạ tầng này, bạn sẽ thấy chúng ta có một ứng dụng web ở phía bên trái. Nó đại diện cho ứng dụng để người dùng được sử dụng và trải nghiệm nó. Nó sẽ được truy cập bằng Amazon CloudFront distribution. Distribution này sẽ lấy resource của ứng dụng từ Amazon S3 bucket. Ứng dụng của chúng tôi truy cập vào các microservices của environment thông qua API Gateway. API Gateway này sẽ xử lí từng yêu cầu và route các traffic đến các chức năng thích hợp trong mỗi microservice của ứng dụng. Đối với ví dụ này, chúng ta đã có 2 e-commerce microservices, Product và Orrder, được cũng cấp các chức năng CRUD cơ bản. Mỗi service này sử dụng Amazon DynamoDB để lưu trữ và quản lí dữ liệu. Nhìn chung, kiến trúc hạ tầng này bao gồm tất cả các yếu tố cơ bản tạo thành một ứng dụng web serverless cơ bản. Tuy nhiên, ở giai đoạn này, solution này sẽ không hỗ trợ cho multi-tenant. Trong tương lai, chúng ta sẽ tìm hiểu và bổ sức các tính năng phục vụ cho multi-tenant.\nServerless microservices Khái niệm về microservice có thể hơi khác một chút đối với serverless environment. Đúng là mỗi chứng năng có thể là microservice. Tuy nhiên, phổ biến hơn là có một tập hợp các functions đại diện cho một logical microservice. Trong trường hợp này, ranh giới microservice là API Gateway, được hỗ trợ bởi một hoặc nhiều Lambda functions. Như trong kiến trúc hạ tầng ở trên, Order service được chia thành nhiều functions như create, get, update và delete. Những functions này đều hoạt động trên cùng một dữ liệu và được nhóm lại với nhau thành một logical microservice.\nCuối cùng, chúng ta đã sử dụng Amazon DynamoDB để lưu trữ dữ liệu của mình và Amazon CloudWatch để lưu trữ tất cả các logs của ứng dụng.\nNội dung Deploy ứng dụng Thêm data và tìm hiểu quy trình xử lí của architecture Review code của ứng dụng "
},
{
	"uri": "/vi/3-serverless/3.3-reviewcode/",
	"title": "Review code của ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bây giờ chúng ta sẽ nhìn lại code đã được sử dụng để build và deploy architecture của chúng ta.\nQuay lại IDE trên Cloud9 và mở thư mục aws-serverless-saas-workshop. Mở rộng thư mục Lab1, bạn sẽ thấy 2 thư mục con là client và server. Thư mục client gồm có code viết bằng Angular dành cho front end.\nThư mục server chứa code dùng để deploy cơ sở hạ tầng AWS infrastructure. Bên trong thư mục server, bạn sẽ nhận thấy chúng ta có thư mục OrderService và ProductService đại diện cho product và order microservices. Cũng lưu ý file template.yaml sẽ đảm nhiệm việc deploy cơ sở hạ tầng. File này đang được triển khai bằng Serverless Application Model (SAM), nó là open-source framework dùng để build và deploy ứng dụng serverless. Trong thư mục server cũng có một thư mục tên là layers, nó chứa file logger.py được deploy bằng Lambda Layers. Bây giờ tất cả các Lambda functions có thể share layer với nhau nhằm mục đích ghi lại các log theo cách centralized.\nBây giờ bạn đã hiểu cơ bản về cấu trúc, tiếp tục thêm những thành phần cần thiết cho ứng dụng SaaS của chúng ta.\n"
},
{
	"uri": "/vi/5-onboarding/5.3-data/",
	"title": "Review dữ liệu được lưu trữ",
	"tags": [],
	"description": "",
	"content": "Để hiểu thêm về những gì xảy ra trong quá trình registration, cùng nhìn lại dữ liệu của tenants và users được lưu trữ.\nCognito User pools Đầu tiên, chúng ta đã nói trước đó, buổi workshop này sử dụng Amazon Cognito để lưu trữ thông tin chi tiết của user. Hãy cùng xem lại user pools được tạo ra trong Amazon Cognito.\nNhập Cognito ở thanh tìm kiếm service trên AWS Console sau đó chọn Cognito.\nSau đó bên thanh điều hướng bên trái, chúng ta chọn User pools. Chúng ta sẽ thấy các User pool name được tạo ra trong buổi workshop của chúng ta sau khi script được deploy hoàn thành. OperationUsers-ServerlessSaaSUserPool được dùng để lưu trữ những users SaaS admin và PooledTenant-ServerlessSaaSUserPool được dùng để lưu trữ thông tin của user được tạo ra trong quá trình đăng kí.\nChúng ta chọn PooledTenant-ServerlessSaaSUserPool. Click vào Users tab để xem các users có sẵn.\nTiếp theo, chúng ta click vào Groups tab để xem các groups dã có sẵn.\nQuay trở lại tab Users, click vào bất kì một trong những tenant admin vừa được tạo và để ý đến thuộc tính tenantId và custom role được thêm vào user này. Những thuộc tính custom này cho phép chúng ta tạo ràng buộc giữa user và tenant. Bất cứ khi nào người dùng xác thực, token được trả về sẽ bao gồm các thuộc tính custom này, cho phép dễ dàng truy cập vào context của tenant trên hệ thống. Context này sẽ đóng vai trò quan trọng trong việc triển khai phần vùng dữ liệu và tenant isolation trong bài workshop này.\nDynamoDB Nhập DynamoDB ở thanh tìm kiếm service trên AWS Console sau đó chọn DynamoDB.\nỞ thanh điều hướng bên trái, chúng ta chọn Tables. Nó sẽ hiện thị danh sách các table đã được tạo ở trong bước trước. Chúng ta chọn ServerlessSaaS-TenantDetails.\nTiếp theo, chúng ta sẽ click vào nút Explore table items để xem các items được lưu trữ trong table. Ở phần Items returned, chúng ta sẽ thấy có 2 object được tạo ra trước đó có trong danh sách này.\n"
},
{
	"uri": "/vi/4-saas/",
	"title": "Giới thiệu SaaS shared services",
	"tags": [],
	"description": "",
	"content": "Trước khi có thể bắt đầu làm việc với các tenants, chúng ta cần giới thiệu các services cho phép chúng ta tích hợp, xác thực và quản lí environment. Các services, được gọi là shared services sẽ cung cấp chứng năng cốt lõi chung cho tất cả các tenants sẽ được quản lí và vận hành trong serverless SaaS solution của chúng ta. Đối với bước này, chúng ta ta sẽ xem xét các shared services và tìm hiểu code đằng sau các services này, điền vào những thiết xót của các chứng năng cần được triển khai. Sau đây là danh sách các tính năng sẽ được thêm vào trong bước này:\nGiới thiệu ứng dụng sign-up mà tất cả tenants của chúng ta có thể tự đăng kí trên ứng dụng SaaS của chúng ta. Giới thiệu SaaS admin console, nó có thể được sử dụng để quản lí SaaS users, tenants và những thứ khác. Thêm ý tưởng về tenancy vào environment của chúng ta bằng việc giới thiệu shared services cần thiết để đăng kí, xác thực và quản lí environment. Thêm khác lo lưu trữ dữ liệu để hỗ trợ quản lí người dùng và quản lí tenants như một phần của các shared services của chúng ta. Mô hình kiến trúc bên dưới miêu ta tổng quát architecture mà chúng ta sẽ build và deploy. Thành phần được tô màu nổi bật với khung màu cam là khu vực mà chúng ta sẽ thêm vào ở bước này để đạt được mục tiêu của buổi workshop này.\nỨng dụng dành cho SaaS admin Ứng dụng dành cho administration nhằm đại diện cho những hành động, những trải nghiệm trên ứng dụng sẽ được dùng bởi các SaaS provider. Ứng dụng này cung cấp những việc quản lí và vận hành cho environment của chúng ta và các tenants của nó.\nLanding/Sign-up page Landing page là một signup page đơn giản, ẩn danh. Nó đại diện cho public-facing marketing page của chúng ta mà qua đó những tenants tiềm năng có thể đăng kí. Khi bạn click vào nút Sign up, bạn sẽ phải cung cấp dữ liệu về tenant mới của bạn và gửi thông tin đó đến dịch vụ đăng kí của hệ thống. Sau đó, service này sẽ tạo ra và cấu hình tất cả resource cần thiết dể đưa tenant mới vào hệ thống.\nShared services Các shared services đề cập đến bộ services chung, nó là cốt lõi của bất kì SaaS environment nào. Các services này cung cấp tất cả các cơ chế cần thiết để có cái nhìn toàn cảnh về cách tenants được onboarded, quản lí và vận hành trong SaaS environment.\nTenant registration Service Tenant Registration cho phép những tenants mới tự đăng kí và sử dụng ứng dụng SaaS của bạn. Nó chịu trách nhiệm sắp xếp các tương tác với quản lí người dùng và quản lí tenant, là một phần của ứng dụng chúng ta.\nUser management Service User Management cho phép chúng ta thêm vào, cập nhật, vô hiệu hóa, lấy thông tin của một user. Nó cũng cho phép lấy thông của tất cả users, vô hiệu hóa tất cả users và cũng có thể kích hoạt tất cả users cũng như tenant. Những users trong trường hợp này sẽ được lưu trữ trong Amazon Cognito.\nTenant management Service Tenant Management cho phép chúng ta tập trung lại tất cả cấu hình và vận hành có thể được thực hiện bởi tenant. Nó bao gồm get, create, update, activate và disable chức năng của tenant. Thông tin chi tiết về tenant được lưu trữ trong table của Amazon DynamoDB.\nTenant onboarding flow Hình bên dưới mô tả quá trình onboarding của tenant và cách mà service Registration dùng các services khác để phân phối quy trình.\nQuy trình đăng kí cho tenant là sự kết hợp của một vài bước. Tenant sử dụng ứng dụng sign-up để truy cập trang đăng kí, nơi họ cung cấp thông tin của mình để đăng kí. Thao tác này bắt đầu quá trình đăng kí bằng cách gọi registration endpoint bên trong API Gateway.\nBước tiếp theo là quy trình gọi đến service User Management để tạo new tenant admin user. Chúng ta đang sử dụng Amazon Cognito làm provider cho buổi workshop này. Service User Management sẽ tạo một Cognito User Group bên trong nhóm người dùng của tenant. Cuối cùng, tenant admin user được tạo ra và được thêm vào nhóm người dùng của tenant.\nLà một phần của việc tạo ra tenant admin user, chúng ta cũng phải liên kết user này với các thuộc tính của tenant. Điều này đạt đượt thông qua các thuộc tính custom của Cognito. Các thuộc tính custom này lưu trữ một số thông tin cụ thể về tenant và user. Đối với solution này, chúng ta đã lưu trữ TenantId và User Role làm custom attributes.\nBước tiếp theo sẽ gọi service Tenant Management để lưu trữ thông tin chi tiết về tenant. Chúng ta cũng lưu trữ thông tin của nhóm người dùng cho tenant, dựa trên dữ liệu thu thập từ bước trước.\nMột điều bạn có thể nhận thấy là service tenant registration không yêu cầu bất kì xác thực nào. Điều này là do thiết kế vì những tenants mới không thể được xác thực. Tuy nhiên, các endpoints được sử dụng để tạo ra tenant admin, tạo ra tenant và províion user đều được bảo vệ. Các endpoints này chỉ có thể được gọi từ service Tenant Registration.\nĐể giữ cho các endpoints nội bồ ở chế độ riêng tư và được bảo vệ, chúng ta đã sử dụng tính năng API Gateway Resource Policies. Các chính sách này đảm bảo rằng các entry points REST riêng tư của các services của chúng ta không thể truy cập public.\nNội dung Khởi tạo dự án Hoàn thiện code Deploy cập nhật nhưng thay đổi "
},
{
	"uri": "/vi/1-introduce/1.4-serverlessused/",
	"title": "Những service Serverless được sử dụng",
	"tags": [],
	"description": "",
	"content": "Dưới đây là danh sách các AWS services và tính năng mà buổi workshop này sử dụng:\nAWS Serverless Application Model (SAM) là một open-source framework để xây dựng các ứng dụng serverless. Nó cung cấp các syntax ngắn để thực hiện các chức năng, APIs, cơ sở dữ liệu và event source mappings. Chỉ với một vài dòng trên mỗi resource, bạn có thể định nghĩa được ứng dụng mà mình muốn và mô hình sử dụng YAML. Trong suốt quá trình deployment, SAM biến đổi và mở rộng cú pháp thành AWS CloudFormation cho phép bạn xây dựng các ứng dụng serverless nhanh hơn.\nAWS Cloud Development Kit (CDK) là open-source software development framework để định nghĩa các cloud infrastructure dưới dạng code và provision nó bằng AWS CloudFormation. Nó cho phép bạn sử dụng các ngôn ngữ lập trình như TypeScript, JavaScript, Python, Java, C#/.Net để định nghĩa các AWS resources trong một ứng dụng. CDK sẽ biến đổi các ngôn ngữ lập trình này thành CloudFormation template và deploy nó lên AWS.\nAmazon API Gateway là một fully managed service để tạo, quản lí, monitor và bảo mật các API ở bất kì quy mô nào. Nó cung cấp các tính năng như API creation, publishing, maintenance, monitoring, và securing. Nó cũng cho phép bạn tạo các RESTful APIs và WebSocket APIs để truyền tải dữ liệu ở bất kì quy mô nào.\nREST APIs là một dạng API mà nó sử dụng HTTP requests để truyền tải dữ liệu. REST APIs có thể truyền tải dữ liệu ở bất kì định dạng nào như JSON, XML, HTML, text, etc. Lambda Authorizer là một cách để bảo mật các REST APIs bằng cách sử dụng Lambda function để xác thực các yêu cầu API. Lambda authorizers có thể được sử dụng để xác thực các yêu cầu API bằng cách sử dụng bearer token, request parameters, headers, và client certificates. Usage Plans là một cách để quản lí các yêu cầu API của bạn. Nó cho phép bạn quản lí các yêu cầu API bằng cách sử dụng API keys và rate limits. API keys là một cách để bảo mật các REST APIs bằng cách sử dụng API keys. API keys có thể được sử dụng để bảo mật các REST APIs bằng cách sử dụng các API keys. Amazon Cognito là một fully managed service để xác thực, quản lí người dùng và đồng bộ hóa dữ liệu người dùng trên các thiết bị. Nó cung cấp các tính năng như sign-up, sign-in, và access control cho các ứng dụng web và mobile. Nó cũng cho phép bạn đồng bộ hóa dữ liệu người dùng trên các thiết bị.\nUser Pools là một cách để xác thực và quản lí người dùng. Nó cung cấp các tính năng như sign-up, sign-in, và access control cho các ứng dụng web và mobile. AWS Lambda là một service serverless compute cho phép bạn chạy code mà không cần phải provision hay manage các servers. Lambda cung cấp một cách để chạy code mà không cần phải quản lí các servers. Nó cũng cung cấp các tính năng như auto scaling, high availability, và native integrations với một số service khác của AWS.\nAmazon DynamoDB là một cặp key-value serverless và là một loại cơ sở dữ liệu phi quan hệ (Non-SQL) mang lại hiệu suất một phần nghìn giây ở mọi quy mô. Tương tự với những cơ sở dữ liệu khác, Amazon DynamoDB sẽ lưu trữ data bằng các bảng. Trong ứng dụng của chúng ta, chúng ta sẽ lưu trữ thông tin của các tasks trong bảng của DynamoDB. Bảng này sẽ được truy cập bằng Lambda function bằng sự phản hồi đến API từ ứng dụng web của chúng ta.\nThêm vào đó, chúng ta sẽ lựa chọn và sử dụng ngôn ngữ lập trình chính là Python trong buổi workshop này.\n"
},
{
	"uri": "/vi/2-prerequiste/2.4-cloudwatch/",
	"title": "Thiết lập role ARN của CloudWatch log cho API Gateway",
	"tags": [],
	"description": "",
	"content": "\rĐầu tiên, chúng ta sẽ cập nhật phiên bản mới nhất của AWS CLI:\npip install --user --upgrade awscli aws-sam-cli Ở bước này, trong account AWS của chúng ta, chúng ta sẽ đảm bảo role ARN của CloudWatch log được thiết lập cho API Gateway. Bạn cần bước thiết lập này để chắc chắn API Gateway có thể ghi log vào CloudWatch để có thể debug errors của API Gateway REST APIs.\nAPI Gateway - REST API Nhập API Gateway ở thanh tìm kiếm service trên AWS Console sau đó chọn API Gateway.\nNếu đây là lần đầu bạn sử dụng API Gateway, bạn sẽ thấy trang giới thiệu các tính năng của API Gateway. Dưới REST API, ta chọn Build. Khi popup Create Example API xuất hiện, ta chọn OK.\nNếu như đây không phải là lần đầu sử dụng API Gateway, ta chọn Create API ở góc trên bên phải của trang.\nỞ trang Choose an API type, ta chọn loại REST API nhưng không phải Private và chọn Build.\nỞ trang Choose the protocol, chúng ta sẽ chọn giao thức của nó, chúng ta chọn REST, ở phần Create new API, chúng ta chọn Example API, nó sẽ hiện ra một example API, chúng ta có thể xem chi tiết về nó.\nVà cuối cùng là nhấn nút Import, nó sẽ tạo ra API mới.\nAPI mới sẽ được hiển thị ở đây với cái tên là PetStore.\nĐể biết thêm về cách sử dụng API đó, các bạn sẽ xem ở đây: Example REST API\nTạo CloudWatch role Bước tiếp theo, chúng ta sẽ tạo role ARN cho phép CloudWatch ghi lại log của cách hành động gửi yêu cầu đến API.\nĐầu tiên chúng ta sẽ vào AWS Identity and Access Management (IAM) console, ở thanh điều hướng bên trái, chúng ta chọn Roles.\nClick vào nút Create role.\nỞ trang Create role, phần Trusted entity type, chúng ta chọn AWS service, ở phần Use case, chúng ta sẽ click vào drop box Use cases for other AWS services, chúng ta chọn API Gateway và nhần nút Next.\nỞ trang Add permissions, chúng ta sẽ thấy policy AmazonAPIGatewayPushToCloudWatchLogs đã được chọn sẵn. Policy này có tất cả các quyền chúng ta cần.\nCuối cùng ở trang Name, review, and create, chúng ta đặt tên cho nó ở phần Role name, ở đây mình sẽ đặt là cloudwatch-api. Những mục khác chúng ta để mặt định, nhấn nút Create role. Vậy là chúng ta đã tạo thành công.\nQuay trở lại trang Role, nhập vào thanh tìm kiếm cloudwatch-api nó sẽ hiện thị role mình vừa tạo.\nChúng ta click vào role cloudwatch-api để xem chi tiết. Chúng ta sẽ thấy giá trị ARN của role đó và coppy nó để dùng cho bước tiếp theo.\nQuay trở lại trang API Gateway console, chọn API có tên là PetStore sau đó ở thanh điều hướng bên trái, ở dưới Client Certificates, chúng ta chọn Settings. Ở phần CloudWatch log role ARN, chúng ta paste ARN của role cloudwatch-api vào và nhấn nút Save.\nVậy là chúng ta đã hoàn thành việc thiếp lập CloudWatch log role ARN cho API Gateway. Hãy cùng đi đến bước tiếp theo.\n"
},
{
	"uri": "/vi/5-onboarding/",
	"title": "Bắt đầu ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bây giờ các shared services của chúng ta đã được deploy, chúng ta có thể giới thiệu đến các tenants về ứng dụng của chúng ta. Solution này thực sự hỗ trợ hai luồng riêng biệt dành cho onboarding tenants. Cái đầu tiên chúng ta sẽ xem xét ở đây được trigger từ ứng dụng SaaS admin. Mô hình này thường được sử dụng trong các môi trường mà hệ thống không hỗ trợ self-service onboarding model.\nCác tenants cũng có thể onboard trong chế độ self-service. Đối với việc này, chúng ta cần một ứng dụng riêng đại diện cho công cụ hướng tới công chúng có thể được sử dụng để khách hàng tham với tư cách là một tenant.\nNội dung Sử dụng ứng dụng SaaS admin Sử dụng ứng dụng Sign-up dành cho tenant Review dữ liệu được lưu trữ "
},
{
	"uri": "/vi/1-introduce/1.5-prior/",
	"title": "Kiến thức cần nắm rõ",
	"tags": [],
	"description": "",
	"content": "Buổi workshop này nhằm mục đích đưa ra giải pháp các trường hợp về xây dựng ứng dụng dựa vào SaaS sử dụng các dịch vụ AWS Serverless. Mặc dù không bắt buộc nhưng bạn sẽ thu thập được nhiều kiến thức, kinh nghiệm từ buổi workshop này nếu bạn đã có kiến thức cơ bản về AWS và Serverless. Đối với những người mới tiếp cận Serverless trên AWS, chúng ta sẽ cố gắng cung cấp tổng quát về cách xây dựng ứng dụng web Serverless cơ bản vì buổi workshop này không chú trọng việc giới thiệu kĩ càng về các dịch vụ AWS Serverless.\n"
},
{
	"uri": "/vi/6-sum/",
	"title": "Tổng kết",
	"tags": [],
	"description": "",
	"content": "Trong buổi workshop này, chúng ta đã giới thiệu các khái niệm về các shared services và giới thiệu một số tenant trong pooled model. Chúng ta cũng đã thấy cách thông tin người dùng và tenant được lưu trữ bên trong Cognito và DynamoDB. Nhưng ở giai đoạn này, các product và order microservices không có cơ chế để theo dõi tenant nào đang cố truy cập hệ thống và thậm chí cách phân vùng dữ liệu theo dịch vụ kinh doanh bởi tenants.\n"
},
{
	"uri": "/vi/7-terminate/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Cloud9 instance Chúng ta vào Cloud9 Console bằng cách nhập Cloud9 ở thanh tìm kiếm service trên AWS Console sau đó chọn Cloud9. Chọn Cloud9 mà bạn đã tạo ở bước 2.1 và nhấn nút Delete ở góc trên bên phải.\nSau đó nhập Delete để chúng ta confirm việc xóa Cloud9 instance này và nhấn nút Delete. Chờ vài phút để Cloud9 instance được xóa hoàn toàn.\nCloudFormation Chúng ta vào CloudFormation Console bằng cách nhập CloudFormation ở thanh tìm kiếm service trên AWS Console sau đó chọn CloudFormation. Chúng ta sẽ thấy list các stack được tạo ra trong bài workshop này. Chúng ta chọn từng cái và nhấn nút Delete ở góc trên bên phải.\nĐối với những nested stack, sau khi nhấn nút Delete, chúng ta sẽ chọn option Delete nested stack và nhập delete để confirm. Cuối cùng, chúng ta nhấn nút Delete.\nChờ khoảng vài phút, vậy là chúng ta đã xóa tất cả stacks trong CloudFormation.\nS3 Bucket Chúng ta vào S3 Console bằng cách nhập S3 ở thanh tìm kiếm service trên AWS Console sau đó chọn S3. Chúng ta sẽ thấy list các buckets được tạo ra trong bài workshop này. Chúng ta chọn từng cái và nhấn nút Delete ở góc trên bên phải.\nNếu chúng ta nhận được thông báo như hình thì hãy click vào empty bucket configuration để làm trống bucket trước khi xóa nó.\nCuối cùng, chúng ta cần nhập permanently delete để confirm việc làm trống bucket và nhấn nút Empty. Sau khi làm trống bucket, chúng ta quay lại trang danh sách buckets, chọn một bucket nhấn nút Delete để xóa bucket. Vậy là chúng ta đã xóa thành công S3 bucket.\nCloudWatch Log Groups Chúng ta vào CloudWatch Log Groups bằng cách nhập CloudWatch ở thanh tìm kiếm service trên AWS Console sau đó chọn CloudWatch. Ở thanh điều hướng bên trái, chúng ta chọn Log groups, nó sẽ hiện ra danh sách tất cả các log groups được tạo trong workshop này. Chúng ta chọn tất cả các log groups được tạo trong workshop này, sau đó nhấn nút Action, chọn Delete log group(s) và nhấn nút Delete. Vậy là chúng ta đã xóa thành công Chúng ta sẽ thấy list các stack được tạo ra trong bài workshop này. Chúng ta chọn từng cái và nhấn nút Delete ở góc trên bên phải.\nVậy là chúng ta đã xóa tất cả các tài nguyên được tạo ra trong bài workshop này.\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]